# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _image_processing
else:
    import _image_processing

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class IMAGE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    width = property(_image_processing.IMAGE_width_get, _image_processing.IMAGE_width_set)
    height = property(_image_processing.IMAGE_height_get, _image_processing.IMAGE_height_set)
    bitCount = property(_image_processing.IMAGE_bitCount_get, _image_processing.IMAGE_bitCount_set)
    fileSize = property(_image_processing.IMAGE_fileSize_get, _image_processing.IMAGE_fileSize_set)
    headSize = property(_image_processing.IMAGE_headSize_get, _image_processing.IMAGE_headSize_set)
    depth = property(_image_processing.IMAGE_depth_get, _image_processing.IMAGE_depth_set)
    header = property(_image_processing.IMAGE_header_get, _image_processing.IMAGE_header_set)
    pixels = property(_image_processing.IMAGE_pixels_get, _image_processing.IMAGE_pixels_set)
    rgbPixels = property(_image_processing.IMAGE_rgbPixels_get, _image_processing.IMAGE_rgbPixels_set)

    def __init__(self, *args):
        _image_processing.IMAGE_swiginit(self, _image_processing.new_IMAGE(*args))
    __swig_destroy__ = _image_processing.delete_IMAGE

# Register IMAGE in _image_processing:
_image_processing.IMAGE_swigregister(IMAGE)

class BMP(IMAGE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _image_processing.BMP_swiginit(self, _image_processing.new_BMP(*args))
    __swig_destroy__ = _image_processing.delete_BMP

# Register BMP in _image_processing:
_image_processing.BMP_swigregister(BMP)

class PBM(IMAGE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _image_processing.PBM_swiginit(self, _image_processing.new_PBM(*args))
    __swig_destroy__ = _image_processing.delete_PBM

# Register PBM in _image_processing:
_image_processing.PBM_swigregister(PBM)

class PGM(IMAGE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _image_processing.PGM_swiginit(self, _image_processing.new_PGM(*args))
    __swig_destroy__ = _image_processing.delete_PGM

# Register PGM in _image_processing:
_image_processing.PGM_swigregister(PGM)

class PPM(IMAGE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _image_processing.PPM_swiginit(self, _image_processing.new_PPM(*args))
    __swig_destroy__ = _image_processing.delete_PPM

# Register PPM in _image_processing:
_image_processing.PPM_swigregister(PPM)

class RAW(IMAGE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _image_processing.RAW_swiginit(self, _image_processing.new_RAW(*args))
    __swig_destroy__ = _image_processing.delete_RAW

# Register RAW in _image_processing:
_image_processing.RAW_swigregister(RAW)


def clip(val, lo, hi):
    return _image_processing.clip(val, lo, hi)

def isNumber(c):
    return _image_processing.isNumber(c)

def isWhitespace(c):
    return _image_processing.isWhitespace(c)

def isNewline(c):
    return _image_processing.isNewline(c)

def isSpace(c):
    return _image_processing.isSpace(c)

def isComment(c):
    return _image_processing.isComment(c)

def isPrintableCharacter(c):
    return _image_processing.isPrintableCharacter(c)

def nextInt(bytes, size, pointer):
    return _image_processing.nextInt(bytes, size, pointer)

def nextString(bytes, size, pointer):
    return _image_processing.nextString(bytes, size, pointer)

def nextInt16(bytes, size, pointer):
    return _image_processing.nextInt16(bytes, size, pointer)

def nextInt32(bytes, size, pointer):
    return _image_processing.nextInt32(bytes, size, pointer)

def imageLoader(filename):
    return _image_processing.imageLoader(filename)

def getFileSize(filename):
    return _image_processing.getFileSize(filename)

def brighten(target, multiplier):
    return _image_processing.brighten(target, multiplier)

def contrastStretch(target, rMin, rMax):
    return _image_processing.contrastStretch(target, rMin, rMax)

def logTransform(target, c):
    return _image_processing.logTransform(target, c)

def inverseLog(target, c):
    return _image_processing.inverseLog(target, c)

def power(target, c):
    return _image_processing.power(target, c)

def graySlicing(target, rMin, rMax):
    return _image_processing.graySlicing(target, rMin, rMax)

def bitSlicing(target, bit):
    return _image_processing.bitSlicing(target, bit)

def createHistogramDistribution(source):
    return _image_processing.createHistogramDistribution(source)

def applyHistogramEqualization(target):
    return _image_processing.applyHistogramEqualization(target)

def applyHistogramSpecification(target, specification):
    return _image_processing.applyHistogramSpecification(target, specification)

def loadKernel(filename):
    return _image_processing.loadKernel(filename)

def applyFilterUnsharpStrategy(target):
    return _image_processing.applyFilterUnsharpStrategy(target)

def applyFilterHighboostStrategy(target, alpha):
    return _image_processing.applyFilterHighboostStrategy(target, alpha)

def applyFilterCannyStrategy(target):
    return _image_processing.applyFilterCannyStrategy(target)

def applyFilterConvolutionStrategy(target, kernel):
    return _image_processing.applyFilterConvolutionStrategy(target, kernel)

def applyFilterMedianStrategy(target, size):
    return _image_processing.applyFilterMedianStrategy(target, size)

def applyFilterMaxStrategy(target, size):
    return _image_processing.applyFilterMaxStrategy(target, size)

def applyFilterMinStrategy(target, size):
    return _image_processing.applyFilterMinStrategy(target, size)


